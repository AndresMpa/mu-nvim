############################################################################
# ____            _                  _                  _
#| __ )  __ _ ___(_) ___   ___ _ __ (_)_ __  _ __   ___| |_ ___
#|  _ \ / _` / __| |/ __| / __| '_ \| | '_ \| '_ \ / _ \ __/ __|
#| |_) | (_| \__ \ | (__  \__ \ | | | | |_) | |_) |  __/ |_\__ \
#|____/ \__,_|___/_|\___| |___/_| |_|_| .__/| .__/ \___|\__|___/
#                                     |_|   |_|
############################################################################

snippet do "To do reminder" b
//////////////////////////////////////////////////
//TODO: `echo $user` ${1:desc} `!v strftime("%c")`
//////////////////////////////////////////////////
endsnippet

snippet // "Multiline comment" b
/*
 * $1
 * */

endsnippet

snippet l "let = " b
let $1 = $2;
endsnippet

snippet c "const = " b
const $1 = $2;
endsnippet

snippet if "If structure" b
($1)
  ? $2
  : $3
endsnippet

snippet cif "Classic if structure" b
if ( $1 ) {
  $2
} else {
  $3
}
endsnippet

snippet fr "For structure" b
$1.forEach((item) => {
  ${2:console.log(item)}
});
endsnippet

snippet frn "Usual for in structure" b
for (let ${1:item} in $2) {
  $3
}
endsnippet

snippet frf "Usual for of structure" b
for (let ${1:item} of $2) {
  $2
}
endsnippet

snippet cfr "Classic for structure" b
for (let ${1:item} = 0; $1 < $2; $1++) {
  $2[$1]
}
endsnippet

snippet fn "Arrow function" i
($1) => {
  $2
}
endsnippet

snippet vfn "Const as function" b
const $1 = ($2) => {
  $3
};
endsnippet

snippet afn "Anonimus function" i
${1:const $2 =} function($3){
  $4
};
endsnippet

snippet cfn "Classic function" i
function $1($3){
  $2
};
endsnippet

snippet arr "Array template" b
const ${1:itemList} = [
  $2
endsnippet

snippet obj "Object template" b
const ${1:obj} = {
  $2
endsnippet

snippet des "Destructuring expression" b
const { $1 } = $2
endsnippet

snippet try "try-catch block" i
try {
  $1
} catch {
  ${2:console.error(error);}
}
endsnippet

snippet imp "General import from" b
import ${2:{ $3 }} from '$1';
endsnippet

snippet exp "General export template" b
export ${2:default} $1
endsnippet


############################################################################
############################################################################
############################################################################

snippet group "Create a group of log" b
console.group("${1:test}");
$2
console.groupEnd($1);
endsnippet

snippet log "Simple console.log()" b
console.log(${1:"$2"});
endsnippet

snippet err "Append an error in the console" b
console.error(${1:"$2"});
endsnippet

snippet warn "Append a warning to the console" b
console.warn(${1:"$2"});
endsnippet

snippet tab "Append a table of array element" b
console.table(${1:itemList});
endsnippet

snippet time "Test how much time somethings take to be execute" b
console.time("${1:test}");
$2
console.timeEnd("$1");
endsnippet

############################################################################
############################################################################
############################################################################

snippet iife "Inmediatly Invoke Function Expression" b
(() => {
  "use strict";
  $1
})();
endsnippet

snippet sw "Service worker template" b
if ("serviceWorker" in navigator) {
  navigator.serviceWorker.register("/serviceWorker.js").catch((error) => {
    console.error(error.message);
  })
}
endsnippet

snippet tst "Test what is being taking for event" b
window.addEventListener("click", (e) => {
  console.log(e.target);
});
endsnippet

snippet random "Get a random number" b
const random = (min, max) => Math.floor(Math.random() * (max - min)) + min;
endsnippet

snippet sort "Sort an array using .sort"
const sortArray = (itemList) => itemList.sort((a, b) => a - b);
endsnippet

snippet isEven "Gef if a number is even" b
const isEven = (number) => number % 2;
endsnippet

snippet rmDuplicate "removeDuplicates" b
const removeRepetition = (itemList) => [...new Set(itemList)];
endsnippet

snippet promise "Promise template" b
new Promise((resolve, reject) => {
  resolve($1);
  reject($2);
});
endsnippet

snippet browser "Get browser" b

const detectBrowser = () => {
  if (
    (navigator.userAgent.indexOf("Opera") ||
      navigator.userAgent.indexOf("OPR")) != -1
  ) {
    return "Opera";
  } else if (navigator.userAgent.indexOf("Chrome") != -1) {
    return "Chrome";
  } else if (navigator.userAgent.indexOf("Safari") != -1) {
    return "Safari";
  } else if (navigator.userAgent.indexOf("Firefox") != -1) {
    return "Firefox";
  } else if (
    navigator.userAgent.indexOf("MSIE") != -1 ||
    !!document.documentMode == true
  ) {
    return "IE"; //crap
  } else {
    return "Unknown";
  }
};
endsnippet

############################################################################
############################################################################
############################################################################
# _____                _                 _
#|  ___| __ ___  _ __ | |_ ___ _ __   __| |
#| |_ | '__/ _ \| '_ \| __/ _ \ '_ \ / _` |
#|  _|| | | (_) | | | | ||  __/ | | | (_| |
#|_|  |_|  \___/|_| |_|\__\___|_| |_|\__,_|
############################################################################
############################################################################
############################################################################

snippet gi "getElementById()" b
${1:const} $2 = document.getElementById('$3')
endsnippet

snippet gt "getElementsByTagName()" b
${1:const} $2 = document.getElementsByTagName('$3')
${4:
for( let i = 0; i < $2.length; i++ ) {
  ${5:console.log($2[i])}
};
}
endsnippet

snippet gc "getElementsByClassName()" b
${1:const} $2 = document.getElementsByClassName('$3')
${4:
for( let i = 0; i < $2.length; i++ ) {
  ${5:console.log($2[i])}
};
}
endsnippet

snippet qs "querySelector" b
${1:const} $2 = document.querySelector("#$2")
endsnippet

snippet qsa "querySelectorAll" b
${1:const} $2 = document.querySelectorAll("$2")
${4:
  $2.forEach(($3) => {

  });
}
endsnippet

snippet att "Hanlde attribute" b
$1.getAttribute('$2')
$1.removeAttribute('$2')
$1.setAttribute('$2', '$3')
endsnippet

snippet vnd "create a new node" b
let $1Tag = document.createElement('$1');
${2:
let tagText = document.createTextNode('$3');
$1Tag.appendChild(tagText);
}
let $4Container = document.querySelector('$5');
$4Container.appendChild($1Tag);
endsnippet

snippet rmnd "remove an element" b
let $1ToRemove = document.querySelector('$1');
$1ToRemove.removeChild($1ToRemove.${2:children[0]})
endsnippet

snippet eve "Add event listener" b
$1.addEventListener("click", ${2:fn});
endsnippet

snippet ceve "Create event listeners" b
const $1 = document.querySelector("#$1");
$3

$1.addEventListener("click", ${2:fn});
endsnippet

snippet seve "Create an single event by addEventListener" b
document.querySelector('$1').addEventListener('${2:click}',${3:fn});
endsnippet


snippet manbsc "It shows all the shortcuts that I have" b
/*
//Basics

do "To do reminder"
// "Multiline comment"
l "let = "
c "const = "
if "If structure"
cif "Classic if structure"
fr "For structure"
frn "Usual for in structure"
frf "Usual for of structure"
cfr "Classic for structure"
fn "Arrow function"
vfn "Const as function"
afn "Anonimus function"
cfn "Classic function"
arr "Array template"
obj "Object template"
des "Destructuring expression"
try "try-catch block"
imp "General import from"
exp "General export template"
*/
endsnippet

snippet manlog "It shows all the console snippets" b
/*
group "Create a group of log"
log "Simple console.log()"
err "Append an error in the console"
warn "Append a warning to the console"
tab "Append a table of array element"
time "Test how much time somethings take to be execute"
*/
endsnippet

snippet manfn "It shows all the pre written functions/utilities" b
/*
iife "Inmediatly Invoke Function Expression"
tst "Test what is being taking for event"
random "Get a random number"
isEven "Gef if a number is even"
rmDuplicate "removeDuplicates"
promise "Promise template"
browser "Get browser"
*/
endsnippet

snippet manfront "It lists all the frontend utilities I have written" b
/*
gi "getElementById()"
gt "getElementsByTagName()"
gc "getElementsByClassName()"
qs "querySelector"
qsa "querySelectorAll"
att "Hanlde attribute"
vnd "create a new node"
rmnd "remove an element"
eve "Add event listener"
ceve "Create event listeners"
seve "Create an single event by addEventListener"
*/
endsnippet

snippet man "The manual" b
/*
snippet manbsc "It shows all the shortcuts that I have" b
snippet manlog "It shows all the console snippets" b
snippet manfn "It shows all the pre written functions/utilities" b
snippet manfront "It lists all the frontend utilities I have written" b
*/
endsnippet
