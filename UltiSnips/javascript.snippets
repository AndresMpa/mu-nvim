############################################################################
# ____            _                  _                  _
#| __ )  __ _ ___(_) ___   ___ _ __ (_)_ __  _ __   ___| |_ ___
#|  _ \ / _` / __| |/ __| / __| '_ \| | '_ \| '_ \ / _ \ __/ __|
#| |_) | (_| \__ \ | (__  \__ \ | | | | |_) | |_) |  __/ |_\__ \
#|____/ \__,_|___/_|\___| |___/_| |_|_| .__/| .__/ \___|\__|___/
#                                     |_|   |_|
############################################################################

snippet do "To do reminder" b
//////////////////////////////////////////////////
//TODO: `echo $user` ${1:desc} `!v strftime("%c")`
//////////////////////////////////////////////////
endsnippet

snippet log "Simple console.log()" b
console.log("$1");
endsnippet

snippet imp "General import from" b
import ${2:{ $3 }} from '$1';
endsnippet

snippet l "let =" b
let $1 = $2;
endsnippet

snippet c "const = " b
const $1 = $2;
endsnippet

snippet clf "Classic function" i
function $1($3){
  $2
};
endsnippet

snippet arf "Arrow function" i
($1) => {
  $2
}
endsnippet

snippet anf "Anonimus arrow function" i
${1:const $2 =} function($3){
  $4
};
endsnippet

snippet it "it('', () => {})" b
it('$1', () => {
  $2
})
endsnippet

snippet dsc "describe('', () => {})" b
describe('$1', () => {
  $2
})
endsnippet


snippet obj "= {}" b
const $1 = {
  $2
};
endsnippet

snippet arr "= []" b
const $1 = [
  $2
];
endsnippet

snippet des "const {} =" b
const { $1 } = $2
endsnippet

snippet try "try-catch block" i
try {
  $1
} catch (e) {
  ${2:console.log(e);}
}
endsnippet

snippet iife "Inmediatly Invoke Function Expression" b
(function(){
  "use strict";
  $1
})();
endsnippet

snippet tst "Test what is being taking for event" b
window.addEventListener("click", (e) => {
  console.log(e.target);
});
endsnippet

############################################################################
############################################################################
############################################################################
# _____                _                 _
#|  ___| __ ___  _ __ | |_ ___ _ __   __| |
#| |_ | '__/ _ \| '_ \| __/ _ \ '_ \ / _` |
#|  _|| | | (_) | | | | ||  __/ | | | (_| |
#|_|  |_|  \___/|_| |_|\__\___|_| |_|\__,_|
############################################################################
############################################################################
############################################################################

############################################################################
#__     __          _ _ _             _ ____
#\ \   / /_ _ _ __ (_) | | __ _      | / ___|
# \ \ / / _` | '_ \| | | |/ _` |  _  | \___ \
#  \ V / (_| | | | | | | | (_| | | |_| |___) |
#   \_/ \__,_|_| |_|_|_|_|\__,_|  \___/|____/
#           _                  _
# ___ _ __ (_)_ __  _ __   ___| |_ ___
#/ __| '_ \| | '_ \| '_ \ / _ \ __/ __|
#\__ \ | | | | |_) | |_) |  __/ |_\__ \
#|___/_| |_|_| .__/| .__/ \___|\__|___/
#            |_|   |_|
############################################################################

snippet gtid "getElementById()" b
${1:const} $2 = document.getElementById('$3')
endsnippet

snippet gttg "getElementsByTagName()" b
${1:const} $2 = document.getElementsByTagName('$3')
${4:
for( let i = 0; i < $2.length; i++ ) {
  ${5:console.log($2[i])}
};
}
endsnippet

snippet gtcl "getElementsByClassName()" b
${1:const} $2 = document.getElementsByClassName('$3')
${4:
for( let i = 0; i < $2.length; i++ ) {
  ${5:console.log($2[i])}
};
}
endsnippet

snippet qs "querySelector" b
${1:const} $2 = document.querySelector("#$2")
endsnippet

snippet qsa "querySelectorAll" b
${1:const} $2 = document.querySelectorAll("$2")
${4:
for( let i = 0; i < $2.length; i++ ) {
  ${5:console.log($2[i])}
};
}
endsnippet

snippet stAtt "setAttribute" b
$1.setAttribute('$2', '$3')
endsnippet

snippet rmAtt "removeAttribute" b
$1.removeAttribute('$2')
endsnippet

snippet gAtt "getAttribute" b
$1.getAttribute('$2')
endsnippet

snippet inn "innerHTML" b
$1.innerHTML = ``;
endsnippet

snippet clNm "className" b
$1.className = ``;
endsnippet

snippet cNode "create a new node" b
let $1Tag = document.createElement('$1');
${2:
let tagText = document.createTextNode('$3');
$1Tag.appendChild(tagText);
}
let $4Container = document.querySelector('$5');
$4Container.appendChild($1Tag);
endsnippet

snippet rmNode "remove an element" b
let $1ToRemove = document.querySelector('$1');
$1ToRemove.removeChild($1ToRemove.${2:children[0]})
endsnippet

snippet ael "Add event listeners trigger" b
$1.addEventListener("click", ${2:arf});
endsnippet

snippet eve "Create event listeners" b
const $1 = document.querySelector("#$1");
$3

$1.addEventListener("click", ${2:arf});
endsnippet

snippet seve "Create an single event by addEventListener" b
document
  ${1:.querySelector('$1')}
  .addEventListener('${2:click}',${3:anf});
endsnippet

############################################################################
# ____                 _               _                  _
#|  _ \ ___  __ _  ___| |_   ___ _ __ (_)_ __  _ __   ___| |_ ___
#| |_) / _ \/ _` |/ __| __| / __| '_ \| | '_ \| '_ \ / _ \ __/ __|
#|  _ <  __/ (_| | (__| |_  \__ \ | | | | |_) | |_) |  __/ |_\__ \
#|_| \_\___|\__,_|\___|\__| |___/_| |_|_| .__/| .__/ \___|\__|___/
#                                       |_|   |_|
############################################################################

snippet rct "React component" b
import React, { Component } from "react";

export default class $1 extends Component {
  render() {
    return (
      $2
    );
  }
}
endsnippet

snippet rctObj "React function component" b
import React, { Component } from "react";

export default class $1 extends Component {
  constructor(props) {
    super(props);

    // Setting up state
    this.state = {
      $2: "",
    };

    // Setting up functions
    this.$3 = this.$3.bind(this);

  }

  $3(e) {
    this.setState({ $2: e.target.value });
  }

  onSubmit(e) {
    e.preventDefault();

    console.log(`Name: ${this.state}`);

    this.setState({
      $2: "",
    });
  }

  render() {
    return (
      <div>
      </div>
    );
  }
}
endsnippet

############################################################################
############################################################################
############################################################################
# ____             _                  _
#| __ )  __ _  ___| | _____ _ __   __| |
#|  _ \ / _` |/ __| |/ / _ \ '_ \ / _` |
#| |_) | (_| | (__|   <  __/ | | | (_| |
#|____/ \__,_|\___|_|\_\___|_| |_|\__,_|
############################################################################
############################################################################
############################################################################

############################################################################
# ____                        _ _
#/ ___|  ___  __ _ _   _  ___| (_)_______
#\___ \ / _ \/ _` | | | |/ _ \ | |_  / _ \
# ___) |  __/ (_| | |_| |  __/ | |/ /  __/
#|____/ \___|\__, |\__,_|\___|_|_/___\___|
#               |_|
#           _                  _
# ___ _ __ (_)_ __  _ __   ___| |_ ___
#/ __| '_ \| | '_ \| '_ \ / _ \ __/ __|
#\__ \ | | | | |_) | |_) |  __/ |_\__ \
#|___/_| |_|_| .__/| .__/ \___|\__|___/
#            |_|   |_|
############################################################################


snippet sequelize "Sequelize init snippet" b
'use strict';
const {
  Model
} = require('sequelize');
module.exports = (sequelize, DataTypes) => {
  class $1 extends Model {
    static associate(${2:models}) {
    }
  };
  $1.init({
    $2
  }, {
    sequelize,
    modelName: '$1',
  });
  return $1;
};
endsnippet

snippet data "General structure for SQL DB files" b
$1: {
  type: DataTypes.$2,
  defaultValue: $3,
  allowNull: $4,
  unique: $5,
}
endsnippet

snippet int "Basic structure for integer data type" b
$1: DataTypes.INTEGER,
endsnippet

snippet str "Basic structure for string data type" b
$1: DataTypes.STRING${2:($3)},
endsnippet

snippet tbo "Basic structure for boolena data type" b
$1: DataTypes.BOOLEAN,
endsnippet

snippet date "Basic structure for data data type" b
$1: DataTypes.DATE,
endsnippet

snippet tb "Basic structure for SQL tables" b
$1.init({
  $2
}, {
  sequelize,
  modelName: '$1',
});
return $1;
endsnippet
