snippet do "To do reminder"
  /* TODO: `echo $user` ${1:desc} `!v strftime("%c")` */

snippet // "Multiline comment"
  /*
   * $1
   * */

snippet l "let = "
  let $1 = $2;

snippet c "const = "
  const $1 = $2;


snippet if "If structure"
  ($1)
    ? $2
    : $3


snippet cif "Classic if structure"
  if ( $1 ) {
    $2
  } else {
    $3
  }


snippet fr "For structure"
  $1.forEach((item) => {
    ${2:console.log(item)}
  });


snippet frn "Usual for in structure"
  for (let ${1:item} in $2) {
    $3
  }


snippet frf "Usual for of structure"
  for (let ${1:item} of $2) {
    $2
  }


snippet cfr "Classic for structure"
  for (let ${1:item} = 0; $1 < $2; $1++) {
    $2[$1]
  }


snippet fn "Arrow function" i
  ($1) => {
    $2
  }


snippet vfn "Const as function"
  const $1 = ($2) => {
    $3
  };


snippet afn "Anonimus function" i
  ${1:const $2 =} function($3){
    $4
  };


snippet cfn "Classic function" i
  function $1($3){
    $2
  };


snippet arr "Array template"
  const ${1:itemList} = [
    $2


snippet obj "Object template"
  const ${1:obj} = {
    $2


snippet des "Destructuring expression"
  const { $1 } = $2


snippet try "try-catch block" i
  try {
    $1
  } catch {
    ${2:console.error(error);}
  }


snippet imp "General import from"
  import ${2:{ $3 }} from '$1';


snippet exp "General export template"
  export ${2:default} $1

snippet group "Create a group of log"
  console.group("${1:test}");
  $2
  console.groupEnd($1);


snippet log "Simple console.log()"
  console.log(${1:"$2"});


snippet err "Append an error in the console"
  console.error(${1:"$2"});


snippet warn "Append a warning to the console"
  console.warn(${1:"$2"});


snippet tab "Append a table of array element"
  console.table(${1:itemList});


snippet time "Test how much time somethings take to be execute"
  console.time("${1:test}");
  $2
  console.timeEnd("$1");

snippet iife "Inmediatly Invoke Function Expression"
  (() => {
    "use strict";
    $1
  })();


snippet sw "Service worker template"
  if ("serviceWorker" in navigator) {
    navigator.serviceWorker.register("/serviceWorker.js").catch((error) => {
      console.error(error.message);
    })
  }


snippet tst "Test what is being taking for event"
  window.addEventListener("click", (e) => {
    console.log(e.target);
  });


snippet random "Get a random number"
  const random = (min, max) => Math.floor(Math.random() * (max - min)) + min;


snippet sort "Sort an array using .sort"
  const sortArray = (itemList) => itemList.sort((a, b) => a - b);


snippet isEven "Gef if a number is even"
  const isEven = (number) => number % 2;


snippet rmDuplicate "removeDuplicates"
  const removeRepetition = (itemList) => [...new Set(itemList)];


snippet promise "Promise template"
  new Promise((resolve, reject) => {
    resolve($1);
    reject($2);
  });


snippet browser "Get browser"

  const detectBrowser = () => {
    if (
      (navigator.userAgent.indexOf("Opera") ||
        navigator.userAgent.indexOf("OPR")) != -1
    ) {
      return "Opera";
    } else if (navigator.userAgent.indexOf("Chrome") != -1) {
      return "Chrome";
    } else if (navigator.userAgent.indexOf("Safari") != -1) {
      return "Safari";
    } else if (navigator.userAgent.indexOf("Firefox") != -1) {
      return "Firefox";
    } else if (
      navigator.userAgent.indexOf("MSIE") != -1 ||
      !!document.documentMode == true
    ) {
      return "IE"; //crap
    } else {
      return "Unknown";
    }
  };


snippet gi "getElementById()"
  ${1:const} $2 = document.getElementById('$3')


snippet gt "getElementsByTagName()"
  ${1:const} $2 = document.getElementsByTagName('$3')
  ${4:
  for( let i = 0; i < $2.length; i++ ) {
    ${5:console.log($2[i])}
  };
  }


snippet gc "getElementsByClassName()"
  ${1:const} $2 = document.getElementsByClassName('$3')
  ${4:
  for( let i = 0; i < $2.length; i++ ) {
    ${5:console.log($2[i])}
  };
  }


snippet qs "querySelector"
  ${1:const} $2 = document.querySelector("#$2")


snippet qsa "querySelectorAll"
  ${1:const} $2 = document.querySelectorAll("$2")
  ${4:
  $2.forEach(($3) => {
  });
  }


snippet att "Hanlde attribute"
  $1.getAttribute('$2')
  $1.removeAttribute('$2')
  $1.setAttribute('$2', '$3')


snippet vnd "create a new node"
  let $1Tag = document.createElement('$1');
  ${2:
  let tagText = document.createTextNode('$3');
  $1Tag.appendChild(tagText);
  }
  let $4Container = document.querySelector('$5');
  $4Container.appendChild($1Tag);


snippet rmnd "remove an element"
  let $1ToRemove = document.querySelector('$1');
  $1ToRemove.removeChild($1ToRemove.${2:children[0]})


snippet eve "Add event listener"
  $1.addEventListener("click", ${2:fn});


snippet ceve "Create event listeners"
  const $1 = document.querySelector("#$1");
  $3

  $1.addEventListener("click", ${2:fn});


snippet seve "Create an single event by addEventListener"
  document.querySelector('$1').addEventListener('${2:click}',${3:fn});


snippet react "React skeleton"
  import React from "react";
  import ReactDOM from "react-dom";
  import App from "./component/App";

  ReactDOM.render(<App />, document.querySelector("#app"));



snippet manbsc "It shows all the shortcuts that I have"
  /*
  //Basics

  do "To do reminder"
  // "Multiline comment"
  l "let = "
  c "const = "
  if "If structure"
  cif "Classic if structure"
  fr "For structure"
  frn "Usual for in structure"
  frf "Usual for of structure"
  cfr "Classic for structure"
  fn "Arrow function"
  vfn "Const as function"
  afn "Anonimus function"
  cfn "Classic function"
  arr "Array template"
  obj "Object template"
  des "Destructuring expression"
  try "try-catch block"
  imp "General import from"
  exp "General export template"
  */


snippet manlog "It shows all the console snippets"
  /*
  group "Create a group of log"
  log "Simple console.log()"
  err "Append an error in the console"
  warn "Append a warning to the console"
  tab "Append a table of array element"
  time "Test how much time somethings take to be execute"
  */


snippet manfn "It shows all the pre written functions/utilities"
  /*
  iife "Inmediatly Invoke Function Expression"
  tst "Test what is being taking for event"
  random "Get a random number"
  isEven "Gef if a number is even"
  rmDuplicate "removeDuplicates"
  promise "Promise template"
  browser "Get browser"
  */


snippet manfront "It lists all the frontend utilities I have written"
  /*
  gi "getElementById()"
  gt "getElementsByTagName()"
  gc "getElementsByClassName()"
  qs "querySelector"
  qsa "querySelectorAll"
  att "Hanlde attribute"
  vnd "create a new node"
  rmnd "remove an element"
  eve "Add event listener"
  ceve "Create event listeners"
  seve "Create an single event by addEventListener"
  */


snippet man "The manual"
  /*
  snippet manbsc "It shows all the shortcuts that I have"
  snippet manlog "It shows all the console snippets"
  snippet manfn "It shows all the pre written functions/utilities"
  snippet manfront "It lists all the frontend utilities I have written"
  */

